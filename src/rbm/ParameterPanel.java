/**
 * This Java Class is part of the RBM-provisor Application
 * which, in turn, is part of the Intelligent Music Software
 * project at Harvey Mudd College, under the directorship of Robert Keller.
 *
 * Copyright (C) 2009 Robert Keller and Harvey Mudd College
 *
 * RBM-provisor is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * RBM-provisor is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * merchantability or fitness for a particular purpose.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with RBM-provisor; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
 */


/*
 * TempParameterPannel.java
 *
 * Created on Jun 18, 2009, 5:10:07 PM
 */

package rbm;
import javax.swing.*;

/**
 *
 * @author swirepe
 */



public class ParameterPanel extends javax.swing.JPanel {

    /** Creates new form TempParameterPannel */
    public ParameterPanel() {
        initComponents();
    }

    public void setComponentsEnabled(boolean enabled) {
        learningRateField.setEnabled(enabled);
        epochNumField.setEnabled(enabled);
        layerNumField.setEnabled(enabled);
        layerSizeList.setEnabled(enabled);
    }

    public int[] getLayerSizes()
    {
        DefaultListModel model = (DefaultListModel)layerSizeList.getModel();
        int numLayers = model.size();
        int[] layerSizes = new int[numLayers];
        for (int i=0; i<numLayers; ++i)
            layerSizes[i] = (Integer)model.getElementAt(i);
        return layerSizes;
    }

    public void addLayer(int newLayerSize) {
        DefaultListModel model = (DefaultListModel)layerSizeList.getModel();
        model.addElement(newLayerSize);
        layerNumField.setText(model.size()+"");

    }

    public int getNumLayers() {
        return Integer.parseInt(layerNumField.getText());
    }

    public int getNumEpochs() {
        return Integer.parseInt(epochNumField.getText());
    }

    public float getLearningRate() {
        return Float.parseFloat(learningRateField.getText());
    }//*/

    public void importSettings(MusicBrain brain) {
        int[] layerSizes = brain.getLayerSizes();
        DefaultListModel newModel = new DefaultListModel();
        for (int i = 0; i < layerSizes.length; i++) {
            newModel.add(i, layerSizes[i]);
        }
        layerSizeList.setModel(newModel);
        layerNumField.setText(layerSizes.length+"");
        epochNumField.setText(brain.getNumEpochs()+"");
        learningRateField.setText(brain.getLearningRate()+"");
        Params.ALPHA = brain.getLearningRate(); //Only do this because ALPHA
                                                //is a global we need to set
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        displayButtons = new javax.swing.ButtonGroup();
        finalActivationButtons = new javax.swing.ButtonGroup();
        jPanel2 = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        layerNumField = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        layerSizeList = new javax.swing.JList();
        jPanel5 = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        epochNumField = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        learningRateField = new javax.swing.JTextField();
        jPanel6 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        noDisplayButton = new javax.swing.JRadioButton();
        hintonDisplayButton = new javax.swing.JRadioButton();
        stateDisplayButton = new javax.swing.JRadioButton();
        jPanel4 = new javax.swing.JPanel();
        probDistFinalActivationButton = new javax.swing.JRadioButton();
        maxProbFinalActivationButton = new javax.swing.JRadioButton();
        defaultFinalActivationButton = new javax.swing.JRadioButton();
        jLabel2 = new javax.swing.JLabel();

        displayButtons.add(noDisplayButton);
        displayButtons.add(stateDisplayButton);
        displayButtons.add(hintonDisplayButton);
        switch (Params.VISUAL_DISPLAY_MODE) {
            case Params.NONE:
            displayButtons.setSelected(noDisplayButton.getModel(), true);
            break;
            case Params.STATE:
            displayButtons.setSelected(stateDisplayButton.getModel(), true);
            break;
            case Params.HINTON:
            displayButtons.setSelected(hintonDisplayButton.getModel(), true);
        }

        finalActivationButtons.add(defaultFinalActivationButton);
        finalActivationButtons.add(maxProbFinalActivationButton);
        finalActivationButtons.add(probDistFinalActivationButton);

        switch (Params.FINAL_ACTIVATION_MODE) {
            case Params.DEFAULT:
            finalActivationButtons.setSelected(defaultFinalActivationButton.getModel(), true);
            break;
            case Params.MAX_PROB:
            finalActivationButtons.setSelected(maxProbFinalActivationButton.getModel(), true);
            break;
            case Params.PROB_DIST:
            finalActivationButtons.setSelected(probDistFinalActivationButton.getModel(), true);
        }

        setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Parameters", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Lucida Grande", 1, 13))); // NOI18N
        setLayout(new java.awt.GridBagLayout());

        jPanel2.setLayout(new java.awt.GridBagLayout());

        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel1.setMinimumSize(new java.awt.Dimension(200, 100));
        jPanel1.setPreferredSize(new java.awt.Dimension(200, 150));
        jPanel1.setLayout(new java.awt.GridBagLayout());

        jLabel3.setText("Network Size");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.insets = new java.awt.Insets(1, 1, 1, 6);
        jPanel1.add(jLabel3, gridBagConstraints);

        layerNumField.setEditable(false);
        layerNumField.setText(Params.NUM_LAYERS+"");
        layerNumField.setMinimumSize(new java.awt.Dimension(20, 20));
        layerNumField.setPreferredSize(new java.awt.Dimension(50, 100));
        layerNumField.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                layerNumFieldMouseClicked(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        jPanel1.add(layerNumField, gridBagConstraints);

        jLabel4.setText("Layer Sizes");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHEAST;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 0, 6);
        jPanel1.add(jLabel4, gridBagConstraints);

        jScrollPane2.setMinimumSize(new java.awt.Dimension(50, 100));
        jScrollPane2.setPreferredSize(new java.awt.Dimension(50, 100));

        DefaultListModel model = new DefaultListModel();
        model.addElement(750);
        model.addElement(375);
        model.addElement(200);
        layerSizeList.setModel(model);
        layerSizeList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                layerSizeListMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(layerSizeList);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 0, 0);
        jPanel1.add(jScrollPane2, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        jPanel2.add(jPanel1, gridBagConstraints);

        jPanel5.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel5.setMinimumSize(new java.awt.Dimension(200, 100));
        jPanel5.setPreferredSize(new java.awt.Dimension(200, 100));
        jPanel5.setLayout(new java.awt.GridBagLayout());

        jLabel5.setText("Number of Epochs");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        jPanel5.add(jLabel5, gridBagConstraints);

        epochNumField.setEditable(false);
        epochNumField.setText(Params.DEFAULT_NUM_EPOCHS+"");
        epochNumField.setMinimumSize(new java.awt.Dimension(75, 20));
        epochNumField.setPreferredSize(new java.awt.Dimension(75, 20));
        epochNumField.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                epochNumFieldMouseClicked(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 5, 5);
        jPanel5.add(epochNumField, gridBagConstraints);

        jLabel6.setText("Learning Rate");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        jPanel5.add(jLabel6, gridBagConstraints);

        learningRateField.setEditable(false);
        learningRateField.setText(Params.ALPHA+"");
        learningRateField.setMinimumSize(new java.awt.Dimension(75, 20));
        learningRateField.setPreferredSize(new java.awt.Dimension(75, 20));
        learningRateField.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                learningRateFieldMouseClicked(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 5, 5);
        jPanel5.add(learningRateField, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        jPanel2.add(jPanel5, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        add(jPanel2, gridBagConstraints);

        jPanel6.setLayout(new java.awt.GridBagLayout());

        jPanel3.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel3.setMinimumSize(new java.awt.Dimension(200, 100));
        jPanel3.setPreferredSize(new java.awt.Dimension(200, 100));
        jPanel3.setLayout(new java.awt.GridBagLayout());

        jLabel1.setText("Display");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        jPanel3.add(jLabel1, gridBagConstraints);

        noDisplayButton.setText("None");
        noDisplayButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                noDisplayButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        jPanel3.add(noDisplayButton, gridBagConstraints);

        hintonDisplayButton.setText("Hinton Diagram");
        hintonDisplayButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                hintonDisplayButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        jPanel3.add(hintonDisplayButton, gridBagConstraints);

        stateDisplayButton.setText("State Diagram");
        stateDisplayButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                stateDisplayButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        jPanel3.add(stateDisplayButton, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        jPanel6.add(jPanel3, gridBagConstraints);

        jPanel4.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel4.setMinimumSize(new java.awt.Dimension(200, 100));
        jPanel4.setPreferredSize(new java.awt.Dimension(200, 100));
        jPanel4.setLayout(new java.awt.GridBagLayout());

        probDistFinalActivationButton.setText("Probability Distribution");
        probDistFinalActivationButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                probDistFinalActivationButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        jPanel4.add(probDistFinalActivationButton, gridBagConstraints);

        maxProbFinalActivationButton.setText("Maximum Probability");
        maxProbFinalActivationButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                maxProbFinalActivationButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        jPanel4.add(maxProbFinalActivationButton, gridBagConstraints);

        defaultFinalActivationButton.setText("Default");
        defaultFinalActivationButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                defaultFinalActivationButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        jPanel4.add(defaultFinalActivationButton, gridBagConstraints);

        jLabel2.setText("Final Activation Settings");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        jPanel4.add(jLabel2, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        jPanel6.add(jPanel4, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        add(jPanel6, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents

    private void layerNumFieldMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_layerNumFieldMouseClicked
        
        DefaultListModel model = (DefaultListModel)(layerSizeList.getModel());
        int oldNumLayers = model.getSize();

        while (layerNumField.isEnabled())
        {
            String s = (String)(JOptionPane.showInputDialog(
                        this,
                        "Set number of layers ("+Params.MIN_LAYER_NUM+"-"+Params.MAX_LAYER_NUM+")",
                        "Network Size",
                        JOptionPane.PLAIN_MESSAGE));
            if (s==null)
                break;
            try {
                int numLayers = Integer.parseInt(s);
                if (numLayers >= Params.MIN_LAYER_NUM && numLayers <= Params.MAX_LAYER_NUM)
                {
                    Object[] oldLayerSizes = model.toArray();
                    int[] newLayerSizes = new int[numLayers];
                    int midpoint = java.lang.Math.min(numLayers,oldLayerSizes.length);
                    for (int i=0; i<midpoint; ++i)
                        newLayerSizes[i] = (Integer)oldLayerSizes[i];
                    for (int i=midpoint; i<newLayerSizes.length; ++i)
                        newLayerSizes[i] = Params.DEFAULT_LAYER_SIZE;

                    //update display
                    layerNumField.setText(numLayers+"");
                    model.setSize(numLayers);
                    for (int i=oldLayerSizes.length; i<numLayers; ++i)
                        model.set(i, Params.DEFAULT_LAYER_SIZE);
                    break;
                }
            } catch (NumberFormatException e) {
                //try again
            }
        }
    }//GEN-LAST:event_layerNumFieldMouseClicked

    private void epochNumFieldMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_epochNumFieldMouseClicked
        while (epochNumField.isEnabled())
        {
            String input = (String)(JOptionPane.showInputDialog(
                        this,
                        "Set number of epochs",
                        "Training Time",
                        JOptionPane.PLAIN_MESSAGE));
            if (input==null)
                break;
            try {
                int newNumEpochs = Integer.parseInt(input);
                if (newNumEpochs > 0)
                {
                    epochNumField.setText(newNumEpochs+"");
                    break;
                }
            } catch (NumberFormatException e) {
                //try again
            }
        }
}//GEN-LAST:event_epochNumFieldMouseClicked

    private void layerSizeListMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_layerSizeListMouseClicked
        while (layerSizeList.isEnabled())
        {
            String input = (String)(JOptionPane.showInputDialog(
                                    this,
                                    "Set number of nodes ("+Params.MIN_LAYER_SIZE+"-"+Params.MAX_LAYER_SIZE+")",
                                    "Layer Size",
                                    JOptionPane.PLAIN_MESSAGE));
            if (input==null)
                break;
            try {
                int newLayerSize = Integer.parseInt(input);
                if (newLayerSize >= Params.MIN_LAYER_SIZE && newLayerSize <= Params.MAX_LAYER_SIZE)
                {
                    int index = layerSizeList.getSelectedIndex();
                    DefaultListModel model = (DefaultListModel)layerSizeList.getModel();
                    model.set(index, newLayerSize);
                    break;
                }
            } catch (NumberFormatException e) {
                //try again
            }
        }
    }//GEN-LAST:event_layerSizeListMouseClicked

    private void noDisplayButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_noDisplayButtonActionPerformed
        Params.VISUAL_DISPLAY_MODE = Params.NONE;
    }//GEN-LAST:event_noDisplayButtonActionPerformed

    private void hintonDisplayButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_hintonDisplayButtonActionPerformed
        Params.VISUAL_DISPLAY_MODE = Params.HINTON;
    }//GEN-LAST:event_hintonDisplayButtonActionPerformed

    private void stateDisplayButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stateDisplayButtonActionPerformed
        Params.VISUAL_DISPLAY_MODE = Params.STATE;
    }//GEN-LAST:event_stateDisplayButtonActionPerformed

    private void defaultFinalActivationButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_defaultFinalActivationButtonActionPerformed
        Params.FINAL_ACTIVATION_MODE = Params.DEFAULT;
    }//GEN-LAST:event_defaultFinalActivationButtonActionPerformed

    private void maxProbFinalActivationButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_maxProbFinalActivationButtonActionPerformed
        Params.FINAL_ACTIVATION_MODE = Params.MAX_PROB;
    }//GEN-LAST:event_maxProbFinalActivationButtonActionPerformed

    private void probDistFinalActivationButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_probDistFinalActivationButtonActionPerformed
        Params.FINAL_ACTIVATION_MODE = Params.PROB_DIST;
    }//GEN-LAST:event_probDistFinalActivationButtonActionPerformed

    private void learningRateFieldMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_learningRateFieldMouseClicked
        while (learningRateField.isEnabled()) {
            String input = (String)(JOptionPane.showInputDialog(
                    this,
                    "Set learning rate (0-1)",
                    "Learning Rate",
                    JOptionPane.PLAIN_MESSAGE));
            if (input==null)
                break;
            try {
                float parsedInput = Float.parseFloat(input);
                if (parsedInput>0 && parsedInput <= 1) {
                    Params.ALPHA = parsedInput;
                    learningRateField.setText(parsedInput+"");
                    break;
                }
            } catch (NumberFormatException e) {
                //try again
            }
        }
}//GEN-LAST:event_learningRateFieldMouseClicked

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JRadioButton defaultFinalActivationButton;
    private javax.swing.ButtonGroup displayButtons;
    private javax.swing.JTextField epochNumField;
    private javax.swing.ButtonGroup finalActivationButtons;
    private javax.swing.JRadioButton hintonDisplayButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextField layerNumField;
    private javax.swing.JList layerSizeList;
    private javax.swing.JTextField learningRateField;
    private javax.swing.JRadioButton maxProbFinalActivationButton;
    private javax.swing.JRadioButton noDisplayButton;
    private javax.swing.JRadioButton probDistFinalActivationButton;
    private javax.swing.JRadioButton stateDisplayButton;
    // End of variables declaration//GEN-END:variables

    public static void main(String[] args)
    {
        JFrame testFrame = new JFrame();
        try{
        UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
        } catch (Exception e) {
            //meh
        }
        testFrame.add(new ParameterPanel());
        testFrame.pack();
        testFrame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        testFrame.setVisible(true);
    }

}

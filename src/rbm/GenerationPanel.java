/**
 * This Java Class is part of the RBM-provisor Application
 * which, in turn, is part of the Intelligent Music Software
 * project at Harvey Mudd College, under the directorship of Robert Keller.
 *
 * Copyright (C) 2009 Robert Keller and Harvey Mudd College
 *
 * RBM-provisor is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * RBM-provisor is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * merchantability or fitness for a particular purpose.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with RBM-provisor; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
 */


/*
 * GenerationPanel.java
 *
 * Created on Jun 22, 2009, 2:31:09 PM
 */

package rbm;
import javax.swing.*;
/**
 *
 * @author Greg Bickerman
 */
public class GenerationPanel extends javax.swing.JPanel {

    MainFrame owner;

    /** Creates new form GenerationPanel */
    public GenerationPanel(MainFrame owner) {
        this.owner = owner;
        initComponents();
    }

    public void setButtonEnabled(boolean enabled) {
        generateButton.setEnabled(enabled);
    }

    public void setAllComponentsEnabled(boolean enabled) {
        genAnnealBox.setEnabled(enabled);
        generateButton.setEnabled(enabled);
        numGenCyclesField.setEnabled(enabled);
        numOutputsField.setEnabled(enabled);
        outDirectoryField.setEnabled(enabled);
        outFilenameField.setEnabled(enabled);
        windowGenBox.setEnabled(enabled);
        stepSizeField.setEnabled(enabled && windowGenBox.isSelected());
        newMelodySizeField.setEnabled(enabled && windowGenBox.isSelected());
        writeLickButton.setEnabled(enabled);
        writeLSButton.setEnabled(enabled);
    }

    public String getSelectedFileExtension() {
        if (writeLickButton.isSelected()) return ".lick";
        else if (writeLSButton.isSelected()) return ".ls";
        else return null;
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        buttonGroup1 = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        numGenCyclesField = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        numOutputsField = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        stepSizeField = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        newMelodySizeField = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        outFilenameField = new javax.swing.JTextField();
        outDirectoryField = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jPanel4 = new javax.swing.JPanel();
        writeLickButton = new javax.swing.JRadioButton();
        writeLSButton = new javax.swing.JRadioButton();
        jPanel2 = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        genAnnealBox = new javax.swing.JCheckBox();
        windowGenBox = new javax.swing.JCheckBox();
        jLabel6 = new javax.swing.JLabel();
        generateButton = new javax.swing.JButton();

        buttonGroup1.add(writeLickButton);
        buttonGroup1.add(writeLSButton);

        setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Generation", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Lucida Grande", 1, 13))); // NOI18N
        setMinimumSize(new java.awt.Dimension(490, 275));
        setPreferredSize(new java.awt.Dimension(490, 275));
        setLayout(new java.awt.GridBagLayout());

        jPanel1.setMinimumSize(new java.awt.Dimension(480, 250));
        jPanel1.setPreferredSize(new java.awt.Dimension(480, 250));
        jPanel1.setLayout(new java.awt.GridBagLayout());

        jPanel3.setMinimumSize(new java.awt.Dimension(475, 160));
        jPanel3.setOpaque(false);
        jPanel3.setPreferredSize(new java.awt.Dimension(475, 160));
        jPanel3.setLayout(new java.awt.GridBagLayout());

        jLabel1.setText("Generation Cycles");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        jPanel3.add(jLabel1, gridBagConstraints);

        numGenCyclesField.setEditable(false);
        numGenCyclesField.setText(Params.DEFAULT_NUM_GENERATION_CYCLES+"");
        numGenCyclesField.setMinimumSize(new java.awt.Dimension(50, 20));
        numGenCyclesField.setPreferredSize(new java.awt.Dimension(50, 20));
        numGenCyclesField.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                numGenCyclesFieldMouseClicked(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 5, 0);
        jPanel3.add(numGenCyclesField, gridBagConstraints);

        jLabel3.setText("Number of Outputs");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        jPanel3.add(jLabel3, gridBagConstraints);

        numOutputsField.setEditable(false);
        numOutputsField.setText(Params.NUM_OUTPUTS+"");
        numOutputsField.setMinimumSize(new java.awt.Dimension(50, 20));
        numOutputsField.setPreferredSize(new java.awt.Dimension(50, 20));
        numOutputsField.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                numOutputsFieldMouseClicked(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 5, 0);
        jPanel3.add(numOutputsField, gridBagConstraints);

        jLabel7.setText("Step Size (in rows)");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        jPanel3.add(jLabel7, gridBagConstraints);

        stepSizeField.setEditable(false);
        stepSizeField.setText("12");
        stepSizeField.setMinimumSize(new java.awt.Dimension(50, 20));
        stepSizeField.setPreferredSize(new java.awt.Dimension(50, 20));
        stepSizeField.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                stepSizeFieldMouseClicked(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 5, 0);
        jPanel3.add(stepSizeField, gridBagConstraints);

        jLabel8.setText("New Melody Size (in rows)");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        jPanel3.add(jLabel8, gridBagConstraints);

        newMelodySizeField.setEditable(false);
        newMelodySizeField.setText("96");
        newMelodySizeField.setMaximumSize(new java.awt.Dimension(50, 20));
        newMelodySizeField.setMinimumSize(new java.awt.Dimension(50, 20));
        newMelodySizeField.setPreferredSize(new java.awt.Dimension(50, 20));
        newMelodySizeField.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                newMelodySizeFieldMouseClicked(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 5, 0);
        jPanel3.add(newMelodySizeField, gridBagConstraints);

        jLabel4.setText("Output Filename");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        jPanel3.add(jLabel4, gridBagConstraints);

        outFilenameField.setEditable(false);
        outFilenameField.setText(Params.OUT_FILENAME+"");
        outFilenameField.setMinimumSize(new java.awt.Dimension(100, 20));
        outFilenameField.setPreferredSize(new java.awt.Dimension(100, 20));
        outFilenameField.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                outFilenameFieldMouseClicked(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 5, 0);
        jPanel3.add(outFilenameField, gridBagConstraints);

        outDirectoryField.setEditable(false);
        outDirectoryField.setText(Params.OUT_DIRECTORY);
        outDirectoryField.setMinimumSize(new java.awt.Dimension(250, 20));
        outDirectoryField.setPreferredSize(new java.awt.Dimension(250, 20));
        outDirectoryField.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                outDirectoryFieldMouseClicked(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 5, 0);
        jPanel3.add(outDirectoryField, gridBagConstraints);

        jLabel2.setText("Output Directory");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        jPanel3.add(jLabel2, gridBagConstraints);

        jPanel4.setLayout(new java.awt.GridBagLayout());

        writeLickButton.setText(".lick format");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        jPanel4.add(writeLickButton, gridBagConstraints);

        writeLSButton.setSelected(true);
        writeLSButton.setText(".ls format");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 8);
        jPanel4.add(writeLSButton, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        jPanel3.add(jPanel4, gridBagConstraints);

        jPanel2.setLayout(new java.awt.GridBagLayout());

        jLabel5.setText("Generational Annealing");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        jPanel2.add(jLabel5, gridBagConstraints);

        genAnnealBox.setSelected(Params.GENERATIONAL_ANNEALING);
        genAnnealBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                genAnnealBoxActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        jPanel2.add(genAnnealBox, gridBagConstraints);

        windowGenBox.setSelected(true);
        windowGenBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                windowGenBoxActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        jPanel2.add(windowGenBox, gridBagConstraints);

        jLabel6.setText("Use Windowed Generation");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        jPanel2.add(jLabel6, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridheight = 3;
        jPanel3.add(jPanel2, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        jPanel1.add(jPanel3, gridBagConstraints);

        generateButton.setText("Generate melody");
        generateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                generateButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHEAST;
        jPanel1.add(generateButton, gridBagConstraints);

        add(jPanel1, new java.awt.GridBagConstraints());
    }// </editor-fold>//GEN-END:initComponents

    private void numOutputsFieldMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_numOutputsFieldMouseClicked
        while (numOutputsField.isEnabled()) {
            String input = JOptionPane.showInputDialog(
                    this,
                    "Set number of outputs",
                    "Output Number",
                    JOptionPane.PLAIN_MESSAGE);
            if (input==null)
                break;
            try {
                int parsedInput = Integer.parseInt(input);
                if (parsedInput > 0) {
                    numOutputsField.setText(parsedInput+"");
                    break;
                }
            } catch (NumberFormatException e) {
                //try again
            }
        }
}//GEN-LAST:event_numOutputsFieldMouseClicked

    private void numGenCyclesFieldMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_numGenCyclesFieldMouseClicked
        while (numGenCyclesField.isEnabled()) {
            String input = JOptionPane.showInputDialog(
                    this,
                    "Set number of generation cycles",
                    "Generation Length",
                    JOptionPane.PLAIN_MESSAGE);
            if (input==null)
                break;
            try {
                int parsedInput = Integer.parseInt(input);
                if (parsedInput > 0) {
                    numGenCyclesField.setText(parsedInput+"");
                    break;
                }
            } catch (NumberFormatException e) {
                //try again
            }
        }
}//GEN-LAST:event_numGenCyclesFieldMouseClicked

    private void generateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_generateButtonActionPerformed
        owner.generateOutput();
}//GEN-LAST:event_generateButtonActionPerformed

    private void outDirectoryFieldMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_outDirectoryFieldMouseClicked
        if (outDirectoryField.isEnabled()) {
           JFileChooser fc = new JFileChooser();
           fc.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
           int status = fc.showOpenDialog(owner);
           if (status == JFileChooser.APPROVE_OPTION)
           {
               String filepath = fc.getSelectedFile().getAbsolutePath();
               outDirectoryField.setText(filepath);
           }
        }
}//GEN-LAST:event_outDirectoryFieldMouseClicked

    private void outFilenameFieldMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_outFilenameFieldMouseClicked
        while (outFilenameField.isEnabled()) {
            String input = JOptionPane.showInputDialog(
                                            this,
                                            "Set output filename",
                                            "Output Filename",
                                            JOptionPane.PLAIN_MESSAGE);
            if (input == null)
                break;
            
            if (input.length() > 0)
            {
                outFilenameField.setText(input);
                break;
            }
        }
    }//GEN-LAST:event_outFilenameFieldMouseClicked

    private void stepSizeFieldMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_stepSizeFieldMouseClicked
        while (stepSizeField.isEnabled()) {
            String input = (String)(JOptionPane.showInputDialog(
                    this,
                    "Set number of segments per window",
                    "Segments per window",
                    JOptionPane.PLAIN_MESSAGE));
            if (input==null)
                break;
            try {
                int parsedInput = Integer.parseInt(input);
                if (parsedInput > 0) {
                    stepSizeField.setText(parsedInput+"");
                    break;
                }
            } catch (NumberFormatException e) {
                //try again
            }
        }
    }//GEN-LAST:event_stepSizeFieldMouseClicked

    private void windowGenBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_windowGenBoxActionPerformed
        stepSizeField.setEnabled(windowGenBox.isSelected());
        newMelodySizeField.setEnabled(windowGenBox.isSelected());
    }//GEN-LAST:event_windowGenBoxActionPerformed

    private void newMelodySizeFieldMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_newMelodySizeFieldMouseClicked
        while (newMelodySizeField.isEnabled()) {
            String input = (String)(JOptionPane.showInputDialog(
                    this,
                    "Set new melody size",
                    "New Melody Size",
                    JOptionPane.PLAIN_MESSAGE));
            if (input==null)
                break;
            try {
                int parsedInput = Integer.parseInt(input);
                if (parsedInput > 0) {
                    newMelodySizeField.setText(parsedInput+"");
                    break;
                }
            }catch(NumberFormatException e) {
                //try again
            }
        }
    }//GEN-LAST:event_newMelodySizeFieldMouseClicked

    private void genAnnealBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_genAnnealBoxActionPerformed
        Params.GENERATIONAL_ANNEALING = genAnnealBox.isSelected();
    }//GEN-LAST:event_genAnnealBoxActionPerformed

    public boolean windowedOn() {
        return windowGenBox.isSelected();
    }

    public int getNumGenCycles() {
        return Integer.parseInt(numGenCyclesField.getText());
    }

    public int getNumOutputs() {
        return Integer.parseInt(numOutputsField.getText());
    }

    public int getGenStepSize() {
        return Integer.parseInt(stepSizeField.getText());
    }

    public int getNewMelodySize() {
        return Integer.parseInt(newMelodySizeField.getText());
    }

    public String getOutDirectory() {
        return outDirectoryField.getText();
    }

    public String getOutFilename() {
        return outFilenameField.getText();
    }

    public void importSettings(MusicBrain brain) {
        newMelodySizeField.setText(brain.getNumMelodyRows()*2 + "");
        windowGenBox.setSelected(brain.getUseWindowing());
        newMelodySizeField.setEnabled(windowGenBox.isSelected());
        stepSizeField.setEnabled(windowGenBox.isSelected());
        stepSizeField.setText(brain.getStepSize()+"");
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JCheckBox genAnnealBox;
    private javax.swing.JButton generateButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JTextField newMelodySizeField;
    private javax.swing.JTextField numGenCyclesField;
    private javax.swing.JTextField numOutputsField;
    private javax.swing.JTextField outDirectoryField;
    private javax.swing.JTextField outFilenameField;
    private javax.swing.JTextField stepSizeField;
    private javax.swing.JCheckBox windowGenBox;
    private javax.swing.JRadioButton writeLSButton;
    private javax.swing.JRadioButton writeLickButton;
    // End of variables declaration//GEN-END:variables

    public static void main(String[] args)
    {
        JFrame testFrame = new JFrame();
        try{
        UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
        } catch (Exception e) {
            //meh
        }
        testFrame.add(new GenerationPanel(new MainFrame()));
        testFrame.pack();
        testFrame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        testFrame.setVisible(true);
    }
}

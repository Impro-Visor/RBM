/**
 * This Java Class is part of the RBM-provisor Application
 * which, in turn, is part of the Intelligent Music Software
 * project at Harvey Mudd College, under the directorship of Robert Keller.
 *
 * Copyright (C) 2009 Robert Keller and Harvey Mudd College
 *
 * RBM-provisor is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * RBM-provisor is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * merchantability or fitness for a particular purpose.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with RBM-provisor; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
 */

/*
 * ReceptiveFieldPanel.java
 *
 * Created on Jul 15, 2009, 10:27:45 AM
 */

package rbm;
import javax.swing.*;
import java.io.File;
/**
 *
 * @author sbosley
 */
public class ReceptiveFieldPanel extends javax.swing.JPanel {

    MainFrame owner;

    /** Creates new form ReceptiveFieldPanel */
    public ReceptiveFieldPanel(MainFrame owner) {
        this.owner = owner;
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        outputDirectoryField = new javax.swing.JTextField();
        outputFilenameField = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        useClusteringBox = new javax.swing.JCheckBox();
        createReceptiveFieldButton = new javax.swing.JButton();
        useThresholdBox = new javax.swing.JCheckBox();

        setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Receptive Field Settings", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Lucida Grande", 1, 13))); // NOI18N
        setLayout(new java.awt.GridBagLayout());

        outputDirectoryField.setEditable(false);
        outputDirectoryField.setText("./");
        outputDirectoryField.setMinimumSize(new java.awt.Dimension(250, 20));
        outputDirectoryField.setPreferredSize(new java.awt.Dimension(250, 20));
        outputDirectoryField.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                outputDirectoryFieldMouseClicked(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 5, 0);
        add(outputDirectoryField, gridBagConstraints);

        outputFilenameField.setEditable(false);
        outputFilenameField.setText("receptive_field");
        outputFilenameField.setMinimumSize(new java.awt.Dimension(150, 20));
        outputFilenameField.setPreferredSize(new java.awt.Dimension(150, 20));
        outputFilenameField.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                outputFilenameFieldMouseClicked(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 5, 0);
        add(outputFilenameField, gridBagConstraints);

        jLabel1.setText("Output directory");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        add(jLabel1, gridBagConstraints);

        jLabel2.setText("Output filename");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        add(jLabel2, gridBagConstraints);

        useClusteringBox.setSelected(true);
        useClusteringBox.setText("Use clustering");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        add(useClusteringBox, gridBagConstraints);

        createReceptiveFieldButton.setText("Create receptive field");
        createReceptiveFieldButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createReceptiveFieldButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        add(createReceptiveFieldButton, gridBagConstraints);

        useThresholdBox.setText("Use threshold");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        add(useThresholdBox, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents

    private void outputDirectoryFieldMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_outputDirectoryFieldMouseClicked
        if (outputDirectoryField.isEnabled()) {
           JFileChooser fc = new JFileChooser();
           fc.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
           int status = fc.showOpenDialog(this);
           if (status == JFileChooser.APPROVE_OPTION)
           {
               String filepath = fc.getSelectedFile().getAbsolutePath();
               outputDirectoryField.setText(filepath);
           }
        }
    }//GEN-LAST:event_outputDirectoryFieldMouseClicked

    private void outputFilenameFieldMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_outputFilenameFieldMouseClicked
        while (outputFilenameField.isEnabled()) {
            String input = (String)(JOptionPane.showInputDialog(
                                            this,
                                            "Set output filename",
                                            "Output Filename",
                                            JOptionPane.PLAIN_MESSAGE));
            if (input == null)
                break;

            if (input.length() > 0)
            {
                outputFilenameField.setText(input);
                break;
            }
        }
    }//GEN-LAST:event_outputFilenameFieldMouseClicked

    private void createReceptiveFieldButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_createReceptiveFieldButtonActionPerformed
        owner.writeReceptiveField(useClustering(), useThreshold(), getFilename());
    }//GEN-LAST:event_createReceptiveFieldButtonActionPerformed

    public String getFilename() {
        return outputDirectoryField.getText()+File.separatorChar+outputFilenameField.getText();
    }

    public boolean useClustering() {
        return useClusteringBox.isSelected();
    }

    public boolean useThreshold(){
        return useThresholdBox.isSelected();
    }

    public void setComponentsEnabled(boolean enabled) {
        outputDirectoryField.setEnabled(enabled);
        outputFilenameField.setEnabled(enabled);
        useClusteringBox.setEnabled(enabled);
        useThresholdBox.setEnabled(enabled);
        createReceptiveFieldButton.setEnabled(enabled);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton createReceptiveFieldButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JTextField outputDirectoryField;
    private javax.swing.JTextField outputFilenameField;
    private javax.swing.JCheckBox useClusteringBox;
    private javax.swing.JCheckBox useThresholdBox;
    // End of variables declaration//GEN-END:variables

}

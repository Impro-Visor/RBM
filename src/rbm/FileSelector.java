/**
 * This Java Class is part of the RBM-provisor Application
 * which, in turn, is part of the Intelligent Music Software
 * project at Harvey Mudd College, under the directorship of Robert Keller.
 *
 * Copyright (C) 2009 Robert Keller and Harvey Mudd College
 *
 * RBM-provisor is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * RBM-provisor is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * merchantability or fitness for a particular purpose.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with RBM-provisor; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
 */


/*
 * FileSelector.java
 *
 * Created on Jun 18, 2009, 2:35:49 PM
 */

package rbm;
import java.io.*;
import javax.swing.*;
import java.util.ArrayList;

/**
 *
 * @author Greg Bickerman
 */
public class FileSelector extends javax.swing.JPanel {

    MainFrame owner;
    /** Creates new form FileSelector */
    public FileSelector(MainFrame owner) {
        this.owner = owner;
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        excludedFiles = new javax.swing.JScrollPane();
        excludedFilesList = new javax.swing.JList();
        excludeLabel = new javax.swing.JLabel();
        selectedFiles = new javax.swing.JScrollPane();
        selectedFilesList = new javax.swing.JList();
        includeLable = new javax.swing.JLabel();
        addFilesButton = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        includeAllButton = new javax.swing.JButton();
        filterIncludeButton = new javax.swing.JButton();
        includeFileButton = new javax.swing.JButton();
        excludeFileButton = new javax.swing.JButton();
        filterExcludeButton = new javax.swing.JButton();
        excludeAllButton = new javax.swing.JButton();

        setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Training data", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Lucida Grande", 1, 13))); // NOI18N
        setMinimumSize(new java.awt.Dimension(700, 500));
        setOpaque(false);
        setPreferredSize(new java.awt.Dimension(700, 500));
        setLayout(new java.awt.GridBagLayout());

        excludedFiles.setMinimumSize(new java.awt.Dimension(260, 400));
        excludedFiles.setPreferredSize(new java.awt.Dimension(260, 600));

        excludedFilesList.setModel(new javax.swing.DefaultListModel() {
            public Object getElementAt(int index) {
                return ((File)super.get(index)).getName();
            }
        });
        excludedFiles.setViewportView(excludedFilesList);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridheight = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        add(excludedFiles, gridBagConstraints);

        excludeLabel.setText("Don't include");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        add(excludeLabel, gridBagConstraints);

        selectedFiles.setMinimumSize(new java.awt.Dimension(260, 400));
        selectedFiles.setPreferredSize(new java.awt.Dimension(260, 600));

        selectedFilesList.setModel(new javax.swing.DefaultListModel() {
            public Object getElementAt(int index) {
                return ((File)super.get(index)).getName();
            }
        }
    );
    selectedFiles.setViewportView(selectedFilesList);

    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 2;
    gridBagConstraints.gridy = 1;
    gridBagConstraints.gridheight = 6;
    gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
    add(selectedFiles, gridBagConstraints);

    includeLable.setText("Include");
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 2;
    gridBagConstraints.gridy = 0;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
    add(includeLable, gridBagConstraints);

    addFilesButton.setText("Add files");
    addFilesButton.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            addFilesButtonActionPerformed(evt);
        }
    });
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 2;
    gridBagConstraints.gridy = 7;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.SOUTHEAST;
    add(addFilesButton, gridBagConstraints);

    jPanel1.setLayout(new java.awt.GridBagLayout());

    includeAllButton.setText("Include all >>");
    includeAllButton.setMaximumSize(new java.awt.Dimension(153, 29));
    includeAllButton.setMinimumSize(new java.awt.Dimension(153, 29));
    includeAllButton.setPreferredSize(new java.awt.Dimension(153, 29));
    includeAllButton.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            includeAllButtonActionPerformed(evt);
        }
    });
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 1;
    gridBagConstraints.gridy = 5;
    gridBagConstraints.insets = new java.awt.Insets(10, 0, 0, 0);
    jPanel1.add(includeAllButton, gridBagConstraints);

    filterIncludeButton.setText("Filter include >>");
    filterIncludeButton.setMaximumSize(new java.awt.Dimension(153, 29));
    filterIncludeButton.setMinimumSize(new java.awt.Dimension(153, 29));
    filterIncludeButton.setPreferredSize(new java.awt.Dimension(153, 29));
    filterIncludeButton.addMouseListener(new java.awt.event.MouseAdapter() {
        public void mouseClicked(java.awt.event.MouseEvent evt) {
            filterIncludeButtonMouseClicked(evt);
        }
    });
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 1;
    gridBagConstraints.gridy = 3;
    gridBagConstraints.insets = new java.awt.Insets(10, 0, 5, 0);
    jPanel1.add(filterIncludeButton, gridBagConstraints);

    includeFileButton.setText(">>");
    includeFileButton.setMaximumSize(new java.awt.Dimension(153, 29));
    includeFileButton.setMinimumSize(new java.awt.Dimension(153, 29));
    includeFileButton.setPreferredSize(new java.awt.Dimension(153, 29));
    includeFileButton.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            includeFileButtonActionPerformed(evt);
        }
    });
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 1;
    gridBagConstraints.gridy = 1;
    gridBagConstraints.insets = new java.awt.Insets(0, 0, 5, 0);
    jPanel1.add(includeFileButton, gridBagConstraints);

    excludeFileButton.setText("<<");
    excludeFileButton.setMaximumSize(new java.awt.Dimension(153, 29));
    excludeFileButton.setMinimumSize(new java.awt.Dimension(153, 29));
    excludeFileButton.setPreferredSize(new java.awt.Dimension(153, 29));
    excludeFileButton.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            excludeFileButtonActionPerformed(evt);
        }
    });
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 1;
    gridBagConstraints.gridy = 2;
    gridBagConstraints.insets = new java.awt.Insets(0, 0, 10, 0);
    jPanel1.add(excludeFileButton, gridBagConstraints);

    filterExcludeButton.setText("<< Filter exclude");
    filterExcludeButton.setMaximumSize(new java.awt.Dimension(153, 29));
    filterExcludeButton.setMinimumSize(new java.awt.Dimension(153, 29));
    filterExcludeButton.setPreferredSize(new java.awt.Dimension(153, 29));
    filterExcludeButton.addMouseListener(new java.awt.event.MouseAdapter() {
        public void mouseClicked(java.awt.event.MouseEvent evt) {
            filterExcludeButtonMouseClicked(evt);
        }
    });
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 1;
    gridBagConstraints.gridy = 4;
    gridBagConstraints.insets = new java.awt.Insets(0, 0, 10, 0);
    jPanel1.add(filterExcludeButton, gridBagConstraints);

    excludeAllButton.setText("<< Exclude all");
    excludeAllButton.setMaximumSize(new java.awt.Dimension(153, 29));
    excludeAllButton.setMinimumSize(new java.awt.Dimension(153, 29));
    excludeAllButton.setPreferredSize(new java.awt.Dimension(153, 29));
    excludeAllButton.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            excludeAllButtonActionPerformed(evt);
        }
    });
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 1;
    gridBagConstraints.gridy = 6;
    gridBagConstraints.insets = new java.awt.Insets(5, 0, 0, 0);
    jPanel1.add(excludeAllButton, gridBagConstraints);

    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 1;
    gridBagConstraints.gridy = 1;
    add(jPanel1, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents

    private void addFilesButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addFilesButtonActionPerformed
        javax.swing.JFileChooser chooser = new javax.swing.JFileChooser();
        chooser.setFileSelectionMode(javax.swing.JFileChooser.DIRECTORIES_ONLY);
        chooser.addChoosableFileFilter(new javax.swing.filechooser.FileFilter() {
           public boolean accept(File f) {
                if (f.isDirectory()) return true;
                return (FileParser.getExtension(f).equals(".lick") || FileParser.getExtension(f).equals(".ls"));
           }

           public String getDescription() {
               return "Lick or Leadsheet files (.lick or .ls)";
           }
        });
        int status = chooser.showOpenDialog(this);
        if (status == javax.swing.JFileChooser.APPROVE_OPTION) {
            File dir = chooser.getSelectedFile();
            final javax.swing.JFileChooser tempChooser = chooser;
            File[] acceptedFiles = dir.listFiles(new FileFilter() {
                public boolean accept(File f) {
                    if (f.isDirectory()) return false;
                    /*for (int i = 0; i < filters.getRowCount(); i++) {
                        String currFilter = (String)filters.getValueAt(i,0);
                        if (currFilter != null && !currFilter.equals(""))
                            if (!f.getName().contains(currFilter)) return false;
                    }*/
                    if (!tempChooser.getFileFilter().accept(f)) return false;
                    return true;
                }
            });

            javax.swing.DefaultListModel selectedFilesModel = (javax.swing.DefaultListModel)selectedFilesList.getModel();
            for (int i = 0; i < acceptedFiles.length; i++) {
                selectedFilesModel.addElement(acceptedFiles[i]);
            }
        }
}//GEN-LAST:event_addFilesButtonActionPerformed

    private void includeFileButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_includeFileButtonActionPerformed
        int[] selectedIndices = excludedFilesList.getSelectedIndices();

        javax.swing.DefaultListModel excludedFilesModel = (javax.swing.DefaultListModel)excludedFilesList.getModel();
        javax.swing.DefaultListModel selectedFilesModel = (javax.swing.DefaultListModel)selectedFilesList.getModel();

        ArrayList<File> temp = new ArrayList<File>();
        for (int i = selectedIndices.length; i > 0; i--) {
            temp.add((File)excludedFilesModel.remove(selectedIndices[i-1]));
        }
        for (int i = temp.size(); i > 0; i--) {
            selectedFilesModel.addElement(temp.remove(i-1));
        }

}//GEN-LAST:event_includeFileButtonActionPerformed

    private void excludeFileButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_excludeFileButtonActionPerformed
        int[] selectedIndices = selectedFilesList.getSelectedIndices();

        javax.swing.DefaultListModel excludedFilesModel = (javax.swing.DefaultListModel)excludedFilesList.getModel();
        javax.swing.DefaultListModel selectedFilesModel = (javax.swing.DefaultListModel)selectedFilesList.getModel();

        ArrayList<File> temp = new ArrayList<File>();
        for (int i = selectedIndices.length; i > 0; i--) {
            temp.add((File)selectedFilesModel.remove(selectedIndices[i-1]));
        }
        for (int i = temp.size(); i > 0; i--) {
            excludedFilesModel.addElement(temp.remove(i-1));
        }
}//GEN-LAST:event_excludeFileButtonActionPerformed

    private void filterIncludeButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_filterIncludeButtonMouseClicked
        if (filterIncludeButton.isEnabled()&&excludedFilesList.getModel().getSize()>0)
        {
            String input = (String)(JOptionPane.showInputDialog(
                        this,
                        "Include all files without this in their name:",
                        "Mass include",
                        JOptionPane.PLAIN_MESSAGE));
            if (input!=null) {
                javax.swing.DefaultListModel availableFilesModel = (javax.swing.DefaultListModel)excludedFilesList.getModel();
                javax.swing.DefaultListModel selectedFilesModel = (javax.swing.DefaultListModel)selectedFilesList.getModel();
                for (int i = 0; i < availableFilesModel.getSize(); i++) {
                    if (!((File)availableFilesModel.get(i)).getName().toLowerCase().contains(input.toLowerCase())) {
                        selectedFilesModel.addElement(availableFilesModel.remove(i));
                        i--;
                    }
                }


            }
        }
}//GEN-LAST:event_filterIncludeButtonMouseClicked

    private void filterExcludeButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_filterExcludeButtonMouseClicked
        if (filterExcludeButton.isEnabled()&&selectedFilesList.getModel().getSize()>0)
        {
            String input = (String)(JOptionPane.showInputDialog(
                        this,
                        "Exclude all files without this in their name:",
                        "Mass exclude",
                        JOptionPane.PLAIN_MESSAGE));
            if (input!=null) {
                javax.swing.DefaultListModel availableFilesModel = (javax.swing.DefaultListModel)excludedFilesList.getModel();
                javax.swing.DefaultListModel selectedFilesModel = (javax.swing.DefaultListModel)selectedFilesList.getModel();
                for (int i = 0; i < selectedFilesModel.getSize(); i++) {
                    if (!((File)selectedFilesModel.get(i)).getName().toLowerCase().contains(input.toLowerCase())) {
                        availableFilesModel.addElement(selectedFilesModel.remove(i));
                        i--;
                    }
                }


            }
        }
}//GEN-LAST:event_filterExcludeButtonMouseClicked

    private void includeAllButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_includeAllButtonActionPerformed
        javax.swing.DefaultListModel excludedFilesModel = (javax.swing.DefaultListModel)excludedFilesList.getModel();
        javax.swing.DefaultListModel selectedFilesModel = (javax.swing.DefaultListModel)selectedFilesList.getModel();

        while(!excludedFilesModel.isEmpty()) {
            selectedFilesModel.addElement(excludedFilesModel.remove(0));
        }
    }//GEN-LAST:event_includeAllButtonActionPerformed

    private void excludeAllButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_excludeAllButtonActionPerformed
        javax.swing.DefaultListModel excludedFilesModel = (javax.swing.DefaultListModel)excludedFilesList.getModel();
        javax.swing.DefaultListModel selectedFilesModel = (javax.swing.DefaultListModel)selectedFilesList.getModel();

        while(!selectedFilesModel.isEmpty()) {
            excludedFilesModel.addElement(selectedFilesModel.remove(0));
        }
    }//GEN-LAST:event_excludeAllButtonActionPerformed

    //Method to get information out of this panel
    public File[] getSelectedFiles() {
        javax.swing.DefaultListModel selectedFilesModel = (javax.swing.DefaultListModel)selectedFilesList.getModel();
        File[] selectedFilesArray = new File[selectedFilesModel.getSize()];
        selectedFilesModel.copyInto(selectedFilesArray);
        return selectedFilesArray;
    }

    public File[] getExcludedFiles() {
        javax.swing.DefaultListModel excludedFilesModel = (javax.swing.DefaultListModel)excludedFilesList.getModel();
        File[] availableFilesArray = new File[excludedFilesModel.getSize()];
        excludedFilesModel.copyInto(availableFilesArray);
        return availableFilesArray;
    }

    public void importSettings(MusicBrain brain) {
        File[] files = brain.getTrainingDataFiles();
        //Move everything from include list to don't include list
        javax.swing.DefaultListModel excludedFilesModel = (javax.swing.DefaultListModel)excludedFilesList.getModel();
        javax.swing.DefaultListModel selectedFilesModel = (javax.swing.DefaultListModel)selectedFilesList.getModel();

        while(!selectedFilesModel.isEmpty()) {
            excludedFilesModel.addElement(selectedFilesModel.remove(0));
        }

        for (int i = 0; i < files.length; i++) {
            selectedFilesModel.addElement(files[i]);
        }

    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addFilesButton;
    private javax.swing.JButton excludeAllButton;
    private javax.swing.JButton excludeFileButton;
    private javax.swing.JLabel excludeLabel;
    private javax.swing.JScrollPane excludedFiles;
    private javax.swing.JList excludedFilesList;
    private javax.swing.JButton filterExcludeButton;
    private javax.swing.JButton filterIncludeButton;
    private javax.swing.JButton includeAllButton;
    private javax.swing.JButton includeFileButton;
    private javax.swing.JLabel includeLable;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane selectedFiles;
    private javax.swing.JList selectedFilesList;
    // End of variables declaration//GEN-END:variables

    /*public static void main(String[] args) {
        JFrame testing = new JFrame();
        testing.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        testing.setLayout(new FlowLayout());
        testing.add(new FileSelector());
        testing.add(new TrainingPanel());
        testing.pack();
        testing.setVisible(true);
    }*/

}

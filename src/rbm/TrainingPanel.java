/**
 * This Java Class is part of the RBM-provisor Application
 * which, in turn, is part of the Intelligent Music Software
 * project at Harvey Mudd College, under the directorship of Robert Keller.
 *
 * Copyright (C) 2009 Robert Keller and Harvey Mudd College
 *
 * RBM-provisor is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * RBM-provisor is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * merchantability or fitness for a particular purpose.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with RBM-provisor; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
 */


/*
 * TrainingPanel.java
 *
 * Created on Jun 18, 2009, 3:50:32 PM
 */

package rbm;
import javax.swing.*;
/**
 *
 * @author Greg Bickerman
 */
public class TrainingPanel extends javax.swing.JPanel {
    
    MainFrame owner;
    boolean continuousTraining;


    /** Creates new form TrainingPanel */
    public TrainingPanel(MainFrame owner) {
        this.owner = owner;
        initComponents();
        continuousTraining = false;
        progressBars.setActionDescription("Training Layer:");
        progressBars.setProgressDescription("Epoch: 0, Input: 0");
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jPanel1 = new javax.swing.JPanel();
        trainButton = new javax.swing.JButton();
        windowingOn = new javax.swing.JCheckBox();
        saveButton = new javax.swing.JButton();
        loadButton = new javax.swing.JButton();
        windowLengthField = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        stopButton = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        stepSizeField = new javax.swing.JTextField();
        transposeInputs = new javax.swing.JCheckBox();
        jLabel6 = new javax.swing.JLabel();
        addLayerButton = new javax.swing.JButton();
        continuousTrainCheck = new javax.swing.JCheckBox();
        epochStepSize = new javax.swing.JTextField();
        epochSteps = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        progressBars = new rbm.ProgressBars();
        jPanel2 = new javax.swing.JPanel();

        setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Train LRBM", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Lucida Grande", 1, 13))); // NOI18N
        setMaximumSize(new java.awt.Dimension(460, 300));
        setMinimumSize(new java.awt.Dimension(460, 300));
        setPreferredSize(new java.awt.Dimension(460, 300));
        setLayout(new java.awt.GridBagLayout());

        jPanel1.setMinimumSize(new java.awt.Dimension(400, 150));
        jPanel1.setPreferredSize(new java.awt.Dimension(400, 150));
        jPanel1.setLayout(new java.awt.GridBagLayout());

        trainButton.setText("Train");
        trainButton.setMaximumSize(new java.awt.Dimension(109, 25));
        trainButton.setMinimumSize(new java.awt.Dimension(109, 25));
        trainButton.setPreferredSize(new java.awt.Dimension(109, 25));
        trainButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                trainButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
        jPanel1.add(trainButton, gridBagConstraints);

        windowingOn.setSelected(true);
        windowingOn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                windowingOnActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 1, 0, 0);
        jPanel1.add(windowingOn, gridBagConstraints);

        saveButton.setText("Save Brain");
        saveButton.setMaximumSize(new java.awt.Dimension(109, 25));
        saveButton.setMinimumSize(new java.awt.Dimension(109, 25));
        saveButton.setPreferredSize(new java.awt.Dimension(109, 25));
        saveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
        jPanel1.add(saveButton, gridBagConstraints);

        loadButton.setText("Load Brain");
        loadButton.setMaximumSize(new java.awt.Dimension(109, 25));
        loadButton.setMinimumSize(new java.awt.Dimension(109, 25));
        loadButton.setPreferredSize(new java.awt.Dimension(109, 25));
        loadButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
        jPanel1.add(loadButton, gridBagConstraints);

        windowLengthField.setEditable(false);
        windowLengthField.setText("48");
        windowLengthField.setMinimumSize(new java.awt.Dimension(50, 20));
        windowLengthField.setPreferredSize(new java.awt.Dimension(50, 20));
        windowLengthField.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                windowLengthFieldMouseClicked(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
        jPanel1.add(windowLengthField, gridBagConstraints);

        jLabel2.setText("Window length (in rows)");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        jPanel1.add(jLabel2, gridBagConstraints);

        jLabel3.setText("Use windowing");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        jPanel1.add(jLabel3, gridBagConstraints);

        stopButton.setText("Stop training");
        stopButton.setEnabled(false);
        stopButton.setMaximumSize(new java.awt.Dimension(109, 25));
        stopButton.setMinimumSize(new java.awt.Dimension(109, 25));
        stopButton.setPreferredSize(new java.awt.Dimension(109, 25));
        stopButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                stopButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
        jPanel1.add(stopButton, gridBagConstraints);

        jLabel4.setText("Step size (in rows)");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        jPanel1.add(jLabel4, gridBagConstraints);

        stepSizeField.setEditable(false);
        stepSizeField.setText("12");
        stepSizeField.setMinimumSize(new java.awt.Dimension(50, 20));
        stepSizeField.setPreferredSize(new java.awt.Dimension(50, 20));
        stepSizeField.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                stepSizeFieldMouseClicked(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
        jPanel1.add(stepSizeField, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 1, 0, 0);
        jPanel1.add(transposeInputs, gridBagConstraints);

        jLabel6.setText("Transpose inputs");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        jPanel1.add(jLabel6, gridBagConstraints);

        addLayerButton.setText("Add layer to brain");
        addLayerButton.setMaximumSize(new java.awt.Dimension(150, 25));
        addLayerButton.setMinimumSize(new java.awt.Dimension(150, 25));
        addLayerButton.setPreferredSize(new java.awt.Dimension(150, 25));
        addLayerButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addLayerButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        jPanel1.add(addLayerButton, gridBagConstraints);

        continuousTrainCheck.setText("Continuous Training?");
        continuousTrainCheck.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                continuousTrainCheckActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        jPanel1.add(continuousTrainCheck, gridBagConstraints);

        epochStepSize.setText("10");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
        jPanel1.add(epochStepSize, gridBagConstraints);

        epochSteps.setText("5");
        epochSteps.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                epochStepsActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
        jPanel1.add(epochSteps, gridBagConstraints);

        jLabel7.setText("Epoch Steps");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
        jPanel1.add(jLabel7, gridBagConstraints);

        jLabel5.setText("Epoch Step Size");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
        jPanel1.add(jLabel5, gridBagConstraints);

        add(jPanel1, new java.awt.GridBagConstraints());
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        add(progressBars, gridBagConstraints);

        jPanel2.setLayout(new java.awt.GridLayout(4, 1));
        add(jPanel2, new java.awt.GridBagConstraints());
    }// </editor-fold>//GEN-END:initComponents

    private void trainButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_trainButtonActionPerformed

        owner.trainBrain(continuousTraining);
}//GEN-LAST:event_trainButtonActionPerformed

    public int getEpochStepSize()
    {
        return Integer.parseInt(epochStepSize.getText());
    }
    
    public int getEpochSteps()
    {
        return Integer.parseInt(epochSteps.getText());
    }
    private void saveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveButtonActionPerformed
        if (owner.hasBrain())
            owner.saveBrain();
    }//GEN-LAST:event_saveButtonActionPerformed

    private void loadButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadButtonActionPerformed
        owner.loadBrain();
    }//GEN-LAST:event_loadButtonActionPerformed

    private void windowLengthFieldMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_windowLengthFieldMouseClicked
        while (windowLengthField.isEnabled()) {
            String input = (String)(JOptionPane.showInputDialog(
                    this,
                    "Set window length (rows per window)",
                    "Window Length",
                    JOptionPane.PLAIN_MESSAGE));
            if (input==null)
                break;
            try {
                int parsedInput = Integer.parseInt(input);
                if (parsedInput > 0) {
                    windowLengthField.setText(parsedInput+"");
                    break;
                }
            } catch (NumberFormatException e) {
                //try again
            }
        }
    }//GEN-LAST:event_windowLengthFieldMouseClicked

    private void stopButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stopButtonActionPerformed
        owner.stopTraining();
    }//GEN-LAST:event_stopButtonActionPerformed

    private void windowingOnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_windowingOnActionPerformed
        windowLengthField.setEnabled(windowingOn.isSelected());
        stepSizeField.setEnabled(windowingOn.isSelected());
    }//GEN-LAST:event_windowingOnActionPerformed

    private void stepSizeFieldMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_stepSizeFieldMouseClicked
        while (stepSizeField.isEnabled()) {
            String input = (String)(JOptionPane.showInputDialog(
                    this,
                    "Set number of rows per segment",
                    "Rows Per Segment",
                    JOptionPane.PLAIN_MESSAGE));
            if (input==null)
                break;
            try {
                int parsedInput = Integer.parseInt(input);
                if (parsedInput > 0) {
                    stepSizeField.setText(parsedInput+"");
                    break;
                }
            } catch (NumberFormatException e) {
                //try again
            }
        }
    }//GEN-LAST:event_stepSizeFieldMouseClicked

    private void addLayerButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addLayerButtonActionPerformed
        owner.addLayerToBrain();
    }//GEN-LAST:event_addLayerButtonActionPerformed

    private void epochStepsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_epochStepsActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_epochStepsActionPerformed

    private void continuousTrainCheckActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_continuousTrainCheckActionPerformed
        // TODO add your handling code here:
        continuousTraining = !continuousTraining;
        epochStepSize.setEnabled(!epochStepSize.isEnabled());
        epochSteps.setEnabled(!epochSteps.isEnabled());
    }//GEN-LAST:event_continuousTrainCheckActionPerformed

    public boolean useWindowing() {
        return windowingOn.isSelected();
    }

    public boolean transposeInputs() {
        return transposeInputs.isSelected();
    }

    public int getWindowLength() {
        return Integer.parseInt(windowLengthField.getText());
    }

    public int getTrainingStepSize() {
        return Integer.parseInt(stepSizeField.getText());
    }

    public void importSettings(MusicBrain brain) {
        windowingOn.setSelected(brain.getUseWindowing());
        windowLengthField.setEnabled(windowingOn.isSelected());
        stepSizeField.setEnabled(windowingOn.isSelected());
        transposeInputs.setSelected(brain.getTransposeInputs());
        windowLengthField.setText(brain.getNumMelodyRows()+"");
        stepSizeField.setText(brain.getStepSize()+"");
    }

    public void setAllButtonsEnabled(boolean enabled) {
        trainButton.setEnabled(enabled);
        saveButton.setEnabled(enabled);
        loadButton.setEnabled(enabled);
        windowingOn.setEnabled(enabled);
        windowLengthField.setEnabled(enabled && windowingOn.isSelected());
        stepSizeField.setEnabled(enabled && windowingOn.isSelected());
        transposeInputs.setEnabled(enabled);
        addLayerButton.setEnabled(enabled);
    }

    public void setStopButtonEnabled(boolean enabled) {
        stopButton.setEnabled(enabled);
    }

    public ProgressBars getProgressBars() {
        return progressBars;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addLayerButton;
    private javax.swing.JCheckBox continuousTrainCheck;
    private javax.swing.JTextField epochStepSize;
    private javax.swing.JTextField epochSteps;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JButton loadButton;
    private rbm.ProgressBars progressBars;
    private javax.swing.JButton saveButton;
    private javax.swing.JTextField stepSizeField;
    private javax.swing.JButton stopButton;
    private javax.swing.JButton trainButton;
    private javax.swing.JCheckBox transposeInputs;
    private javax.swing.JTextField windowLengthField;
    private javax.swing.JCheckBox windowingOn;
    // End of variables declaration//GEN-END:variables

}
